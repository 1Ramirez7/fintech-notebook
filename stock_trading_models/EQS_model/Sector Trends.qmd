---
title: "Sector Trends"
format: html
editor: visual
---

## Quarto

This file is to see the stats like the 5 number summary for sectors and or sub sectors. The point of this data is to see how common ratios are for each sector. When comparing ratios in rank formulas, it can help better identify what is the normal for that sector etc.

# IDEAS

-   This data has to be like a one and done deal

-   have multiple stats like averages for stocks between \$2 and \$5

-   how do the averages change for a sector according to the stock price.

-   When stocks are new, how long does it take to go up in price, what is the % change in price over time etc.

# Questions/Concerns/Bugs

-   This data changes over time as many of this ratios are on a last reported basis.

-   Prices of stocks change over time so average data could differ.

-   

spacer

```{r}
library(readxl)
library(dplyr)
library(ggplot2)

# Replace 'your_file.xlsx' with the path to your Excel file
df <- read_excel("data/index82624/forfriday8_30_24.xlsx", sheet = "Sheet 1")

# Filter rows where 'sector' equals 'Communications'
df_communications <- df %>%
  filter(sector == "Energy")

# Further filter the data to exclude values outside the desired ranges
df_filtered <- df_communications %>%
  filter(`7Davg_price` >= 1 & `7Davg_price` <= 100 & `P/E` >= 0 & `P/E` <= 50)

# Plotting the data
ggplot(df_filtered, aes(x = `7Davg_price`, y = `P/E`)) +
  geom_point() +
  geom_smooth(method = "lm", col = "blue") + # Add a linear regression line
  labs(title = "Relationship between 7Davg_price and P/E",
       x = "7Davg_price",
       y = "P/E")

```

spacer

# generates for each sector for PE n saves as PNG

-   add code so it saves in graphics folder.

```{r}
library(readxl)
library(dplyr)
library(ggplot2)

# Replace 'your_file.xlsx' with the path to your Excel file
df <- read_excel("data/index82624/forfriday8_30_24.xlsx", sheet = "Sheet 1")

# Get the unique sectors
sectors <- unique(df$sector)

# Loop through each sector
for(sector_name in sectors) {
  # Filter rows for the current sector
  df_sector <- df %>%
    filter(sector == sector_name)

  # Further filter the data to exclude values outside the desired ranges
  df_filtered <- df_sector %>%
    filter(`7Davg_price` >= 1 & `7Davg_price` <= 100 & `P/E` >= 0 & `P/E` <= 50)

  # Plotting the data
  p <- ggplot(df_filtered, aes(x = `7Davg_price`, y = `P/E`)) +
    geom_point() +
    geom_smooth(method = "lm", col = "blue") + # Add a linear regression line
    labs(title = paste("Relationship between 7Davg_price and P/E -", sector_name),
         x = "7Davg_price",
         y = "P/E")

  # Save the plot as a PNG file
  ggsave(paste0("plot_", sector_name, ".png"), plot = p, width = 10, height = 8)
}

```

spacer

# I try adding a visual to see concentration of observatios but it didnt pan out.

```{r}
library(readxl)
library(dplyr)
library(ggplot2)

# Replace 'your_file.xlsx' with the path to your Excel file
df <- read_excel("data/index82624/forfriday8_30_24.xlsx", sheet = "Sheet 1")

# Get the unique sectors
sectors <- unique(df$sector)

# Loop through each sector
for(sector_name in sectors) {
  # Filter rows for the current sector
  df_sector <- df %>%
    filter(sector == sector_name)

  # Further filter the data to exclude values outside the desired ranges
  df_filtered <- df_sector %>%
    filter(`7Davg_price` >= 1 & `7Davg_price` <= 100 & `P/E` >= 0 & `P/E` <= 50)

  # Plotting the data with density contours
  p <- ggplot(df_filtered, aes(x = `7Davg_price`, y = `P/E`)) +
    geom_point(alpha = 0.5) + # Adjust transparency to see overlapping points
    geom_density_2d(aes(color = ..level..), size = 1) + # Add density contours
    stat_density_2d(aes(fill = ..level.., alpha = ..level..), geom = "polygon") + # Add filled density
    scale_fill_viridis_c() + # Use a color gradient for the fill
    scale_alpha(range = c(0.3, 0.7), guide = FALSE) + # Adjust the alpha transparency range
    labs(title = paste("Relationship between 7Davg_price and P/E -", sector_name),
         x = "7Davg_price",
         y = "P/E") +
    theme_light() # Use a light theme for better visibility

  # Save the plot as a PNG file
  ggsave(paste0("plot_", sector_name, ".png"), plot = p, width = 10, height = 8)
}


```

spacer
